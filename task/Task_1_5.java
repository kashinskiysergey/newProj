
public class Task_1_5 {

	public static void main(String[] args) {
		
		//additionalTask5	with array from task1
		int ten_twenty =0;
		int twenty_thirty=0;
		int thirty_forty=0;
		int forty_fifty=0;
	    
		
        //task1	
		
		int [][]ar = new int[8][5];
		for (int i = 0;i<8;i++){
			for(int j =0;j<5;j++){
				do{
				ar[i][j]=(int)(Math.random()*100);
				//System.out.println(ar[i][j]);
				}
				while(ar[i][j]<10);
				System.out.println("task1_ArrayValueCells - "+ar[i][j]);
				if(ar[i][j]>10&&ar[i][j]<20){
					ten_twenty++;
				}else if(ar[i][j]>20&&ar[i][j]<30){
					twenty_thirty++;
				}else if(ar[i][j]>30&&ar[i][j]<40){
					thirty_forty++;
				}else if(ar[i][j]>40&&ar[i][j]<50){
					forty_fifty++;
				}
			}
		}	
		System.out.println("\n\radditionalTask5	with array from task1\n\rten_twenty - "+ten_twenty);
		System.out.println("twenty_thirty - "+twenty_thirty);
		System.out.println("thirty_forty - "+thirty_forty);
		System.out.println("forty_fifty - "+forty_fifty+"\n\r");
		
		//task2
		
		  int countt=0;
		   for(int j=0;j<3;j++){
		    
		    for(int k=0;k<10;k++){
		    
		     for(int l=0;l<6;l++){
		      
		      for(int p=0;p<10;p++){
		       if(j==p&&k==l){
		    	   if((j==2&&p==2)&&(k==4&&l==4)||(j==2&&p==2)&&(k==5&&l==5)){
		    		   break;
		    	   }
		    	   System.out.println(j+""+k+" "+l+""+p);
		    	   countt++;
		    	  
		       }
		      }
		     }
		    }
		   }
		  System.out.println("task2 symmetric numbers - "+countt);
		
		
		// task3
		int countOfmaxValue=0;
		int max=0;
		int nonEmpty[] = new int [10];
		for(int i =0;i<nonEmpty.length;i++){
			nonEmpty[i]=(int)(Math.random()*10);
			if(max<nonEmpty[i]){
				max=nonEmpty[i];			
			}
		}	
		
		for(int i=0;i<nonEmpty.length;i++){
			if(max==nonEmpty[i]){
				countOfmaxValue++;
			}
		}
		System.out.println("\ntask3 - countOfMaxValue - "+countOfmaxValue);
		System.out.println("\ntask4 - reverse array");
		//task4
		for(int i =0;i<nonEmpty.length;i++){			
			System.out.print(nonEmpty[i]+" ");			
		}
		System.out.print("\n\r");
		for(int i =0, j=9;i<nonEmpty.length;i++,j--){			
			System.out.print(nonEmpty[j]+" ");			
		}
		
		//task5 
		int [][]randomArray = new int [(int)(Math.random()*10)][];
		for(int i=0;i<randomArray.length;i++){
			randomArray[i]=new int[(int)(Math.random()*10)];
			for(int j =0;j<randomArray[i].length;j++){
				randomArray[i][j]=(int)(Math.random()*10);				
			  }
			}
		System.out.println("\ntask5 - "+ randomArray+"\n\r");		
		
	    //task6
		System.out.print("task6 - ");
		int x=1;
		int z=1;
		for(int i=0;i<11;i++){					
		   if(i==0||i==1){
			System.out.print(z+" ");
			}else{
		   int s=x+z;
		   System.out.print(s+" ");
		   z=x;  x=s;		   
			}		  	
		}
			
		
		 //task7
		 int tik=0;
         for(int i=999999;i>0;i--){       	 
        	 int first= i/100000%10;
        	 int second=i/10000%10;
        	 int third= i/1000%10;
        	 int fourth=i/100%10;
        	 int fifth= i/10%10;
        	 int sixth= i/1%10;
        	 if(first+second+third==fourth+fifth+sixth){
        		 tik++;
        		 
        	 }
         }
         System.out.println("\n\rtask7 - "+tik);
				
		//task8
         
	}
}
//На повторение:
//1. есть массив byte[4] (или 4 числа по байту), необходимо получить int
//
//Д\З:
//1. Создать двумерный массив из 8 строк по 5 столбцов в каждой из случайных целых чисел из отрезка [10;99]. Вывести массив на экран.
//2. Электронные часы показывают время в формате от 00:00 до 23:59. Подсчитать сколько раз за сутки случается так,
//что слева от двоеточия показывается симметричная комбинация для той, что справа от двоеточия (например, 02:20, 11:11 или 15:51).
//3. Напишите программу, печатающую количество максимальных элементов непустого массива, в которой используется только один цикл.
//4. Напишите программу, печатает массив, затем инвертирует (то есть меняет местами первый элемент с последним, второй — с предпоследним и т.д.), и вновь печатает.
//5. Создать двумерный массив из случайных чисел так чтобы размер внутреннего массива был случайным. Вывести массив на экран.
//6. Выведите на экран первые 11 членов последовательности Фибоначчи. Напоминаем, что первый и второй члены последовательности равны единицам, а каждый следующий — сумме двух предыдущих.
//7. В городе N проезд в трамвае осуществляется по бумажным отрывным билетам. Каждую неделю трамвайное депо заказывает в местной типографии рулон билетов с номерами от 000001 до 999999. «Счастливым» считается билетик у которого сумма первых трёх цифр номера равна сумме последних трёх цифр, как, например, в билетах с номерами 003102 или 567576. Трамвайное депо решило подарить сувенир обладателю каждого счастливого билета и теперь раздумывает, как много сувениров потребуется. С помощью программы подсчитайте сколько счастливых билетов в одном рулоне?
//8*. Создайте микротест для вычисления скорости умножения посредством операторов * и >>. Для получения текущего времени используйте long System.currentTimeMillis(). Для достоверности теста нужна статистика, поэтому вычисления лучше прогнать несколько раз для получения достоверного результата.
//
//Доп задание:
//1) Задан одномерный массив X[M+N]. Сформировать двумерный массив A[M][N],
//   элементы которого вычисляются по следующим правилам:
//   - элементы с четной суммой индексов массива А:
//   - элементы с нечетной суммой индексов массива А:
//   сумма индексов 0+0 считается четной.
//2) Создать двумерный массив из 6 строк по 7 столбцов в каждой из случайных целых чисел из отрезка [0;9]. Вывести массив на экран.
//Преобразовать массив таким образом, чтобы на первом месте в каждой строке стоял её наибольший элемент.
//При этом изменять состав массива нельзя, а можно только переставлять элементы в рамках одной строки.
//Порядок остальных элементов строки не важен (т.е. можно соврешить только одну перестановку, а можно отсортировать по убыванию каждую строку). Вывести преобразованный массив на экран.
//Для проверки остаточных знаний учеников после летних каникул, учитель младших классов решил начинать каждый урок с того, чтобы задавать каждому ученику пример из таблицы умножения,
//но в классе 15 человек, а примеры среди них не должны повторяться. В помощь учителю напишите программу, которая будет выводить на экран 15 случайных примеров из таблицы умножения
//(от 2*2 до 9*9, потому что задания по умножению на 1 и на 10 — слишком просты). При этом среди 15 примеров не должно быть повторяющихся (примеры 2*3 и 3*2 и им подобные пары считать повторяющимися).
//3) Имеется массив String[] a, в котором хранятся числа. Требуется преобразовать его в двумерный массив int[][] c, потом найдите сумму каждой цифры этих чисел.
//4) Создать двумерный массив из 8 строк по 5 столбцов в каждой из случайных целых чисел из отрезка [10;99]. Вывести массив на экран только четные строки и столбцы (включая первыую строку и столбец) (сделать несколько способов вывода)ю
//5) Есть массив, заполненниы слцчайными числами до 100. Вывести количество значений в жиапазонах: 10-20, 30-40, 40-50.